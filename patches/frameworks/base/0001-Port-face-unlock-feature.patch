From ce7c879c288d7858af177dac2489ceaf8404420f Mon Sep 17 00:00:00 2001
From: jhenrique09 <jhenrique09.mcz@hotmail.com>
Date: Wed, 25 Mar 2020 22:08:42 -0300
Subject: [PATCH 01/03] Port face unlock feature

* From motorola/foles_retail/foles:10/QPF30.130-15-7/38ece7:user/release-keys

Change-Id: Ic324086a5da214106f7e2517d766d4c6c7192aaa
---
 .../android/hardware/face/FaceManager.java    |  53 ++
 .../android/hardware/face/IFaceService.aidl   |   5 +
 services/core/Android.bp                      |   1 +
 .../server/biometrics/face/FaceService.java   | 457 +++++++++++++++++-
 4 files changed, 514 insertions(+), 2 deletions(-)

diff --git a/core/java/android/hardware/face/FaceManager.java b/core/java/android/hardware/face/FaceManager.java
index 23e38aeb..385d0e71 100644
--- a/core/java/android/hardware/face/FaceManager.java
+++ b/core/java/android/hardware/face/FaceManager.java
@@ -246,6 +246,59 @@ public class FaceManager implements BiometricAuthenticator, BiometricFaceConstan
         }
     }
 
+    /**
+     * Request face authentication enrollment. This call operates the face authentication hardware
+     * and starts capturing images. Progress will be indicated by callbacks to the
+     * {@link EnrollmentCallback} object. It terminates when
+     * {@link EnrollmentCallback#onEnrollmentError(int, CharSequence)} or
+     * {@link EnrollmentCallback#onEnrollmentProgress(int) is called with remaining == 0, at
+     * which point the object is no longer valid. The operation can be canceled by using the
+     * provided cancel object.
+     *
+     * @param token    a unique token provided by a recent creation or verification of device
+     *                 credentials (e.g. pin, pattern or password).
+     * @param cancel   an object that can be used to cancel enrollment
+     * @param flags    optional flags
+     * @param callback an object to receive enrollment events
+     * @hide
+     */
+    @RequiresPermission(MANAGE_BIOMETRIC)
+    public void enroll(byte[] token, CancellationSignal cancel,
+            EnrollmentCallback callback, int[] disabledFeatures) {
+        if (callback == null) {
+            throw new IllegalArgumentException("Must supply an enrollment callback");
+        }
+
+        if (cancel != null) {
+            if (cancel.isCanceled()) {
+                Log.w(TAG, "enrollment already canceled");
+                return;
+            } else {
+                cancel.setOnCancelListener(new OnEnrollCancelListener());
+            }
+        }
+
+        if (mService != null) {
+            try {
+                mEnrollmentCallback = callback;
+                Trace.beginSection("FaceManager#enroll");
+                mService.enrollMoto(mToken, token, mServiceReceiver,
+                        mContext.getOpPackageName(), disabledFeatures);
+            } catch (RemoteException e) {
+                Log.w(TAG, "Remote exception in enroll: ", e);
+                if (callback != null) {
+                    // Though this may not be a hardware issue, it will cause apps to give up or
+                    // try again later.
+                    callback.onEnrollmentError(FACE_ERROR_HW_UNAVAILABLE,
+                            getErrorString(mContext, FACE_ERROR_HW_UNAVAILABLE,
+                                0 /* vendorCode */));
+                }
+            } finally {
+                Trace.endSection();
+            }
+        }
+    }
+
     /**
      * Request face authentication enrollment. This call operates the face authentication hardware
      * and starts capturing images. Progress will be indicated by callbacks to the
diff --git a/core/java/android/hardware/face/IFaceService.aidl b/core/java/android/hardware/face/IFaceService.aidl
index e2ab529d..bc827407 100644
--- a/core/java/android/hardware/face/IFaceService.aidl
+++ b/core/java/android/hardware/face/IFaceService.aidl
@@ -108,4 +108,9 @@ interface IFaceService {
 
     // Initialize the OEM configured biometric strength
     void initConfiguredStrength(int strength);
+
+    // Moto additions
+    // Start face enrollment
+    void enrollMoto(IBinder token, in byte [] cryptoToken, IFaceServiceReceiver receiver,
+            String opPackageName, in int [] disabledFeatures);
 }
diff --git a/services/core/Android.bp b/services/core/Android.bp
index 2510f678..08418a32 100644
--- a/services/core/Android.bp
+++ b/services/core/Android.bp
@@ -134,6 +134,7 @@ java_library_static {
         "overlayable_policy_aidl-java",
         "SurfaceFlingerProperties",
         "vendor.lineage.biometrics.fingerprint.inscreen-V1.0-java",
+        "faceunlock_utils",
     ],
 }
 
diff --git a/services/core/java/com/android/server/biometrics/face/FaceService.java b/services/core/java/com/android/server/biometrics/face/FaceService.java
index e5a18984..5e71986a 100644
--- a/services/core/java/com/android/server/biometrics/face/FaceService.java
+++ b/services/core/java/com/android/server/biometrics/face/FaceService.java
@@ -28,8 +28,14 @@ import android.app.Notification;
 import android.app.NotificationChannel;
 import android.app.NotificationManager;
 import android.app.PendingIntent;
+import android.content.BroadcastReceiver;
+import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.ServiceConnection;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
 import android.content.pm.UserInfo;
 import android.hardware.biometrics.BiometricAuthenticator;
 import android.hardware.biometrics.BiometricConstants;
@@ -47,6 +53,7 @@ import android.hardware.face.IFaceServiceReceiver;
 import android.os.Binder;
 import android.os.Build;
 import android.os.Environment;
+import android.os.Handler;
 import android.os.IBinder;
 import android.os.NativeHandle;
 import android.os.RemoteException;
@@ -56,10 +63,12 @@ import android.os.UserHandle;
 import android.os.UserManager;
 import android.provider.Settings;
 import android.util.Slog;
+import android.util.SparseArray;
 
 import com.android.internal.R;
 import com.android.internal.annotations.GuardedBy;
 import com.android.internal.logging.MetricsLogger;
+import com.android.internal.os.BackgroundThread;
 import com.android.internal.util.DumpUtils;
 import com.android.server.SystemServerInitThreadPool;
 import com.android.server.biometrics.AuthenticationClient;
@@ -85,6 +94,10 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import com.android.internal.util.custom.faceunlock.FaceUnlockUtils;
+import com.motorola.internal.app.IMotoFaceService;
+import com.motorola.internal.app.IMotoFaceServiceReceiver;
+
 /**
  * A service to manage multiple clients that want to access the face HAL API.
  * The service is responsible for maintaining a list of clients and dispatching all
@@ -107,6 +120,230 @@ public class FaceService extends BiometricServiceBase {
     private static final String SKIP_KEYGUARD_ACQUIRE_IGNORE_LIST =
             "com.android.server.biometrics.face.skip_keyguard_acquire_ignore_list";
 
+    /** Start moto changes */
+
+    private static final int MOTO_DEVICE_ID = 1108;
+    private static final String BIND_MOTOFACEID_ACTION = "com.motorola.faceunlock.BIND";
+    private static final String PACKAGE_MOTOFACEID_PACKAGE_NAME = "com.motorola.faceunlock";
+    private static final String PACKAGE_MOTOFACEID_SERVICE_NAME = "com.motorola.faceunlock.service.FaceAuthService";
+
+    SparseArray<IMotoFaceService> mMotoFaceServices = new SparseArray<>();
+    IMotoFaceServiceReceiver mMotoReceiver = new IMotoFaceServiceReceiver.Stub() {
+        @Override
+        public void onEnrollResult(int faceId, int userId, int remaining) {
+            mHandler.post(new Runnable() {
+                @Override
+                public final void run() {
+                    FaceService.super.handleEnrollResult(new Face(getBiometricUtils().getUniqueName(getContext(), userId), faceId, MOTO_DEVICE_ID), remaining);
+                }
+            });
+        }
+
+        @Override
+        public void onAuthenticated(int faceId, int userId, byte[] token) {
+            mHandler.post(new Runnable() {
+                @Override
+                public final void run() {
+                    final Face face = new Face("", faceId, MOTO_DEVICE_ID);
+                    ArrayList<Byte> token_AL = new ArrayList<>(token.length);
+                    for (byte b : token) {
+                        token_AL.add(new Byte(b));
+                    }
+                    final boolean authenticated = faceId != 0;
+                    FaceService.super.handleAuthenticated(authenticated, face, token_AL);
+                }
+            });
+        }
+
+        @Override
+        public void onAcquired(int userId, int acquiredInfo, int vendorCode) {
+            mHandler.post(new Runnable() {
+                @Override
+                public final void run() {
+                    FaceService.super.handleAcquired(MOTO_DEVICE_ID, acquiredInfo, vendorCode);
+                }
+            });
+        }
+
+        @Override
+        public void onError(int error, int vendorCode) {
+            mHandler.post(new Runnable() {
+                @Override
+                public final void run() {
+                    FaceService.super.handleError(MOTO_DEVICE_ID, error, vendorCode);
+                }
+            });
+        }
+
+        @Override
+        public void onRemoved(int[] faceIds, int userId) throws RemoteException {
+            mHandler.post(new Runnable() {
+                @Override
+                public final void run() {
+                    if (faceIds.length > 0) {
+                        for (int i = 0; i < faceIds.length; i++) {
+                            FaceService.super.handleRemoved(new Face("", faceIds[i], MOTO_DEVICE_ID), (faceIds.length - i) - 1);
+                        }
+                        return;
+                    }
+                    FaceService.super.handleRemoved(new Face("", 0, MOTO_DEVICE_ID), 0);
+                }
+            });
+        }
+
+        @Override
+        public void onEnumerate(int[] faceIds, int userId) throws RemoteException {
+            mHandler.post(new Runnable() {
+                @Override
+                public final void run() {
+                    if (faceIds.length > 0) {
+                        for (int i = 0; i < faceIds.length; i++) {
+                            FaceService.super.handleEnumerate(new Face("", faceIds[i], MOTO_DEVICE_ID), (faceIds.length - i) - 1);
+                        }
+                        return;
+                    }
+                    FaceService.super.handleEnumerate(null, 0);
+                }
+            });
+        }
+
+        @Override
+        public void onLockoutChanged(long duration) throws RemoteException {
+            if (duration == 0) {
+                mCurrentUserLockoutMode = 0;
+            } else if (duration == Long.MAX_VALUE) {
+                mCurrentUserLockoutMode = 2;
+            } else {
+                mCurrentUserLockoutMode = 1;
+            }
+            mHandler.post(new Runnable() {
+                @Override
+                public final void run() {
+                    if (duration == 0) {
+                        notifyLockoutResetMonitors();
+                    }
+                }
+            });
+        }
+    };
+    private Handler mMotoServiceHandler;
+    public boolean mIsMotoServiceBinding = false;
+    private static final boolean mUseMotoFaceUnlockService = FaceUnlockUtils.hasMotoFaceUnlock();
+    private final BroadcastReceiver mUserUnlockReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (mUseMotoFaceUnlockService) {
+                if (getMotoFaceService(mCurrentUserId) == null) {
+                    bindMotoFaceAuthService(mCurrentUserId);
+                }
+            }
+        }
+    };
+
+    private class MotoFaceServiceConnection implements ServiceConnection {
+        int mUserId;
+
+        public MotoFaceServiceConnection(int userId) {
+            mUserId = userId;
+        }
+
+        @Override
+        public void onServiceConnected(ComponentName className, IBinder service) {
+            Slog.d(TAG, "MotoFaceService connected");
+            IMotoFaceService motoFaceService = IMotoFaceService.Stub.asInterface(service);
+            if (motoFaceService != null) {
+                synchronized (mMotoFaceServices) {
+                    try {
+                        motoFaceService.setCallback(mMotoReceiver);
+                        motoFaceService.asBinder().linkToDeath(new IBinder.DeathRecipient() {
+                            @Override
+                            public void binderDied() {
+                                Slog.e(TAG, "MotoFaceService binder died");
+                                mMotoFaceServices.remove(mUserId);
+                                if (mUserId == mCurrentUserId) {
+                                    boolean unused = bindMotoFaceAuthService(mUserId);
+                                }
+                            }
+                        }, 0);
+                        mMotoFaceServices.put(mUserId, motoFaceService);
+                        mHandler.post(new Runnable() {
+                            @Override
+                            public final void run() {
+                                if (mMotoFaceServices.size() == 1) {
+                                    loadAuthenticatorIds();
+                                }
+                                updateActiveGroup(mUserId, null);
+                                doTemplateCleanupForUser(mUserId);
+                            }
+                        });
+                    } catch (RemoteException e) {
+                        e.printStackTrace();
+                    }
+                    mIsMotoServiceBinding = false;
+                }
+            }
+        }
+
+        @Override
+        public void onServiceDisconnected(ComponentName className) {
+            Slog.d(TAG, "MotoFaceService disconnected");
+            mMotoFaceServices.remove(mUserId);
+            mIsMotoServiceBinding = false;
+            if (mUserId == mCurrentUserId) {
+                bindMotoFaceAuthService(mUserId);
+            }
+        }
+    }
+
+    private boolean isMotoFaceServiceEnabled() {
+        PackageManager pm = getContext().getPackageManager();
+        if (!mUseMotoFaceUnlockService) {
+            return false;
+        }
+        Intent intent = new Intent(BIND_MOTOFACEID_ACTION);
+        intent.setClassName(PACKAGE_MOTOFACEID_PACKAGE_NAME, PACKAGE_MOTOFACEID_SERVICE_NAME);
+        ResolveInfo info = pm.resolveService(intent, 131072);
+        if (info == null || !info.serviceInfo.isEnabled()) {
+            return false;
+        }
+        return true;
+    }
+
+    private IMotoFaceService getMotoFaceService(int userId) {
+        if (userId == UserHandle.USER_NULL) {
+            updateActiveGroup(ActivityManager.getCurrentUser(), null);
+        }
+        return mMotoFaceServices.get(mCurrentUserId);
+    }
+
+    private boolean bindMotoFaceAuthService(int userId) {
+        Slog.d(TAG, "bindMotoFaceAuthService");
+        if (!isMotoFaceServiceEnabled()) {
+            Slog.d(TAG, "MotoFaceService disabled");
+            return false;
+        } else if (mIsMotoServiceBinding) {
+            Slog.d(TAG, "MotoFaceService is binding");
+            return true;
+        } else {
+            if (userId != UserHandle.USER_NULL && getMotoFaceService(userId) == null) {
+                try {
+                    Intent intent = new Intent(BIND_MOTOFACEID_ACTION);
+                    intent.setClassName(PACKAGE_MOTOFACEID_PACKAGE_NAME, PACKAGE_MOTOFACEID_SERVICE_NAME);
+                    boolean result = getContext().bindServiceAsUser(intent, new MotoFaceServiceConnection(userId), 65, UserHandle.of(userId));
+                    if (result) {
+                        mIsMotoServiceBinding = true;
+                    }
+                    return result;
+                } catch (Exception e) {
+                    Slog.e(TAG, "bindMotoFaceAuthService failed", e);
+                }
+            }
+            return false;
+        }
+    }
+
+    /* End moto changes*/
+
     /**
      * Events for bugreports.
      */
@@ -226,11 +463,17 @@ public class FaceService extends BiometricServiceBase {
 
         @Override
         public boolean shouldFrameworkHandleLockout() {
+            if (mUseMotoFaceUnlockService){
+                return true;
+            }
             return false;
         }
 
         @Override
         public boolean wasUserDetected() {
+            if (mUseMotoFaceUnlockService){
+                return mLastAcquire != FaceManager.FACE_ACQUIRED_NOT_DETECTED;
+            }
             return mLastAcquire != FaceManager.FACE_ACQUIRED_NOT_DETECTED
                     && mLastAcquire != FaceManager.FACE_ACQUIRED_SENSOR_DIRTY;
         }
@@ -375,6 +618,42 @@ public class FaceService extends BiometricServiceBase {
             return Status.OK;
         }
 
+        @Override // Binder call
+        public void enrollMoto(final IBinder token, final byte[] cryptoToken,
+                final IFaceServiceReceiver receiver, final String opPackageName,
+                final int[] disabledFeatures) {
+            checkPermission(MANAGE_BIOMETRIC);
+
+            final boolean restricted = isRestricted();
+            final EnrollClientImpl client = new EnrollClientImpl(getContext(), mDaemonWrapper,
+                    mHalDeviceId, token, new ServiceListenerImpl(receiver), mCurrentUserId,
+                    0 /* groupId */, cryptoToken, restricted, opPackageName, disabledFeatures,
+                    ENROLL_TIMEOUT_SEC) {
+
+                @Override
+                public int[] getAcquireIgnorelist() {
+                    return mEnrollIgnoreList;
+                }
+
+                @Override
+                public int[] getAcquireVendorIgnorelist() {
+                    return mEnrollIgnoreListVendor;
+                }
+
+                @Override
+                public boolean shouldVibrate() {
+                    return false;
+                }
+
+                @Override
+                protected int statsModality() {
+                    return FaceService.this.statsModality();
+                }
+            };
+
+            enrollInternal(client, mCurrentUserId);
+        }
+
         @Override // Binder call
         public void enroll(int userId, final IBinder token, final byte[] cryptoToken,
                 final IFaceServiceReceiver receiver, final String opPackageName,
@@ -558,6 +837,20 @@ public class FaceService extends BiometricServiceBase {
                     UserHandle.getCallingUserId())) {
                 return false;
             }
+            if (mUseMotoFaceUnlockService) {
+                boolean enabled = isMotoFaceServiceEnabled();
+                if (enabled) {
+                    mHandler.post(new Runnable() {
+                        @Override
+                        public final void run() {
+                            if (getMotoFaceService(mCurrentUserId) == null) {
+                                bindMotoFaceAuthService(mCurrentUserId);
+                            }
+                        }
+                    });
+                }
+                return enabled;
+            }
 
             final long token = Binder.clearCallingIdentity();
             try {
@@ -985,6 +1278,20 @@ public class FaceService extends BiometricServiceBase {
     private final DaemonWrapper mDaemonWrapper = new DaemonWrapper() {
         @Override
         public int authenticate(long operationId, int groupId) throws RemoteException {
+            if (mUseMotoFaceUnlockService) {
+                IMotoFaceService service = getMotoFaceService(mCurrentUserId);
+                if (service != null) {
+                    try{
+                        service.authenticate(operationId);
+                    } catch (Exception e) {
+                        Slog.e(TAG, "authenticate failed", e);
+                    }
+                    return 0;
+                }
+                bindMotoFaceAuthService(mCurrentUserId);
+                Slog.w(TAG, "authenticate(): moto face service not started!");
+                return 3;
+            }
             IBiometricsFace daemon = getFaceDaemon();
             if (daemon == null) {
                 Slog.w(TAG, "authenticate(): no face HAL!");
@@ -995,6 +1302,19 @@ public class FaceService extends BiometricServiceBase {
 
         @Override
         public int cancel() throws RemoteException {
+            if (mUseMotoFaceUnlockService) {
+                IMotoFaceService service = getMotoFaceService(mCurrentUserId);
+                if (service == null) {
+                    return 0;
+                }
+                try{
+                    service.cancel();
+                }catch (Exception e) {
+                    Slog.e(TAG, "cancel failed", e);
+                }
+                service.cancel();
+                return 0;
+            }
             IBiometricsFace daemon = getFaceDaemon();
             if (daemon == null) {
                 Slog.w(TAG, "cancel(): no face HAL!");
@@ -1005,6 +1325,20 @@ public class FaceService extends BiometricServiceBase {
 
         @Override
         public int remove(int groupId, int biometricId) throws RemoteException {
+            if (mUseMotoFaceUnlockService) {
+                IMotoFaceService service = getMotoFaceService(mCurrentUserId);
+                if (service != null) {
+                    try{
+                        service.remove(biometricId);
+                    }catch (Exception e) {
+                        Slog.e(TAG, "remove failed", e);
+                    }
+                    return 0;
+                }
+                bindMotoFaceAuthService(mCurrentUserId);
+                Slog.w(TAG, "remove(): moto face service not started!");
+                return 3;
+            }
             IBiometricsFace daemon = getFaceDaemon();
             if (daemon == null) {
                 Slog.w(TAG, "remove(): no face HAL!");
@@ -1015,6 +1349,26 @@ public class FaceService extends BiometricServiceBase {
 
         @Override
         public int enumerate() throws RemoteException {
+            if (mUseMotoFaceUnlockService) {
+                IMotoFaceService service = getMotoFaceService(mCurrentUserId);
+                if (service != null) {
+                    mMotoServiceHandler.post(new Runnable() {
+                        @Override
+                        public final void run() {
+                            try {
+                                service.enumerate();
+                            } catch (Exception e) {
+                                Slog.e(TAG, "enumerate failed", e);
+                                FaceService.super.handleError(MOTO_DEVICE_ID, 8, 0);
+                            }
+                        }
+                    });
+                    return 0;
+                }
+                bindMotoFaceAuthService(mCurrentUserId);
+                Slog.w(TAG, "enumerate(): moto face service not started!");
+                return 3;
+            }
             IBiometricsFace daemon = getFaceDaemon();
             if (daemon == null) {
                 Slog.w(TAG, "enumerate(): no face HAL!");
@@ -1026,6 +1380,27 @@ public class FaceService extends BiometricServiceBase {
         @Override
         public int enroll(byte[] cryptoToken, int groupId, int timeout,
                 ArrayList<Integer> disabledFeatures) throws RemoteException {
+            if (mUseMotoFaceUnlockService) {
+                IMotoFaceService service = getMotoFaceService(mCurrentUserId);
+                int[] dfs = null;
+                if (disabledFeatures != null && disabledFeatures.size() > 0) {
+                    dfs = new int[disabledFeatures.size()];
+                    for (int i = 0; i < disabledFeatures.size(); i++) {
+                        dfs[i] = disabledFeatures.get(i).intValue();
+                    }
+                }
+                if (service != null) {
+                    try{
+                        service.enroll(cryptoToken, timeout, dfs);
+                    }catch (Exception e) {
+                        Slog.e(TAG, "enroll failed", e);
+                    }
+                    return 0;
+                }
+                bindMotoFaceAuthService(mCurrentUserId);
+                Slog.w(FaceService.TAG, "enroll(): moto face service not started!");
+                return 3;
+            }
             IBiometricsFace daemon = getFaceDaemon();
             if (daemon == null) {
                 Slog.w(TAG, "enroll(): no face HAL!");
@@ -1040,6 +1415,20 @@ public class FaceService extends BiometricServiceBase {
 
         @Override
         public void resetLockout(byte[] cryptoToken) throws RemoteException {
+            if (mUseMotoFaceUnlockService) {
+                IMotoFaceService service = getMotoFaceService(mCurrentUserId);
+                if (service != null) {
+                    try{
+                        service.resetLockout(cryptoToken);
+                    }catch (Exception e) {
+                        Slog.e(TAG, "resetLockout failed", e);
+                    }
+                    return;
+                }
+                bindMotoFaceAuthService(mCurrentUserId);
+                Slog.w(TAG, "resetLockout(): moto face service not started!");
+                return;
+            }
             IBiometricsFace daemon = getFaceDaemon();
             if (daemon == null) {
                 Slog.w(TAG, "resetLockout(): no face HAL!");
@@ -1077,6 +1466,8 @@ public class FaceService extends BiometricServiceBase {
                 .getIntArray(R.array.config_face_acquire_enroll_ignorelist);
         mEnrollIgnoreListVendor = getContext().getResources()
                 .getIntArray(R.array.config_face_acquire_vendor_enroll_ignorelist);
+
+        context.registerReceiver(mUserUnlockReceiver, new IntentFilter(Intent.ACTION_USER_UNLOCKED));
     }
 
     @Override
@@ -1092,6 +1483,11 @@ public class FaceService extends BiometricServiceBase {
     public void onStart() {
         super.onStart();
         publishBinderService(Context.FACE_SERVICE, new FaceServiceWrapper());
+        if (mUseMotoFaceUnlockService) {
+            mMotoServiceHandler = BackgroundThread.getHandler();
+            mHalDeviceId = MOTO_DEVICE_ID;
+            return;
+        }
         // Get the face daemon on FaceService's on thread so SystemServerInitThreadPool isn't
         // blocked
         SystemServerInitThreadPool.submit(() -> mHandler.post(this::getFaceDaemon),
@@ -1140,6 +1536,28 @@ public class FaceService extends BiometricServiceBase {
 
     @Override
     protected void updateActiveGroup(int userId, String clientPackage) {
+        if (mUseMotoFaceUnlockService) {
+            mCurrentUserId = userId;
+            IMotoFaceService service = getMotoFaceService(mCurrentUserId);
+            if (service != null) {
+                try {
+                    Map map = mAuthenticatorIds;
+                    Integer valueOf = Integer.valueOf(mCurrentUserId);
+                    long authId = 0;
+                    if (hasEnrolledBiometrics(mCurrentUserId)) {
+                        authId = (long) service.getAuthenticatorId();
+                    }
+                    map.put(valueOf, Long.valueOf(authId));
+                } catch (Exception e) {
+                    Slog.e(TAG, "getAuthenticatorId failed", e);
+                }
+            } else {
+                bindMotoFaceAuthService(mCurrentUserId);
+                Slog.w(TAG, "updateActiveGroup(): moto face service not started!");
+            }
+            return;
+        }
+
         IBiometricsFace daemon = getFaceDaemon();
 
         if (daemon != null) {
@@ -1190,7 +1608,16 @@ public class FaceService extends BiometricServiceBase {
 
     @Override
     protected void handleUserSwitching(int userId) {
-        super.handleUserSwitching(userId);
+        if (mUseMotoFaceUnlockService) {
+            updateActiveGroup(userId, null);
+            if (getMotoFaceService(userId) != null) {
+                doTemplateCleanupForUser(userId);
+            } else {
+                bindMotoFaceAuthService(userId);
+            }
+        } else {
+            super.handleUserSwitching(userId);
+        }
         // Will be updated when we get the callback from HAL
         mCurrentUserLockoutMode = AuthenticationClient.LOCKOUT_NONE;
     }
@@ -1279,6 +1706,20 @@ public class FaceService extends BiometricServiceBase {
     }
 
     private long startGenerateChallenge(IBinder token) {
+        if (mUseMotoFaceUnlockService) {
+            IMotoFaceService service = getMotoFaceService(mCurrentUserId);
+            if (service != null) {
+                try {
+                    return service.generateChallenge(CHALLENGE_TIMEOUT_SEC);
+                } catch (Exception e) {
+                    Slog.e(TAG, "generateChallenge failed", e);
+                }
+            } else {
+                bindMotoFaceAuthService(mCurrentUserId);
+                Slog.w(TAG, "startGenerateChallenge(): moto face service not started!");
+            }
+            return 0;
+        }
         IBiometricsFace daemon = getFaceDaemon();
         if (daemon == null) {
             Slog.w(TAG, "startGenerateChallenge: no face HAL!");
@@ -1293,6 +1734,17 @@ public class FaceService extends BiometricServiceBase {
     }
 
     private int startRevokeChallenge(IBinder token) {
+        if (mUseMotoFaceUnlockService) {
+            IMotoFaceService service = getMotoFaceService(mCurrentUserId);
+            if (service != null) {
+                try {
+                    return service.revokeChallenge();
+                } catch (Exception e) {
+                    Slog.e(TAG, "startRevokeChallenge failed", e);
+                }
+            }
+            return 0;
+        }
         IBiometricsFace daemon = getFaceDaemon();
         if (daemon == null) {
             Slog.w(TAG, "startRevokeChallenge: no face HAL!");
@@ -1367,7 +1819,8 @@ public class FaceService extends BiometricServiceBase {
         // Additionally, this flag allows turning off face for a device
         // (either permanently through the build or on an individual device).
         if (SystemProperties.getBoolean("ro.face.disable_debug_data", false)
-                || SystemProperties.getBoolean("persist.face.disable_debug_data", false)) {
+                || SystemProperties.getBoolean("persist.face.disable_debug_data", false)
+                || mUseMotoFaceUnlockService) {
             return;
         }
 
-- 
2.29.2

